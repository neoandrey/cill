name: Build Docker image

on:
  push:
    branches: [ "main" ]
    
jobs:

  build:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        create_credentials_file: true
        workload_identity_provider: ${{ secrets.GCP_WIP }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}

    - name: decrypt settings
      env:
        settingsKey: ${{ secrets.SETTINGS_DECRYPT_KEY }}
      run: |
        for filename in ./settings/*; do
          gpg --quiet --batch --yes --decrypt --passphrase="$settingsKey"  --output ${filename/.gpg/} "$filename"
          rm -f $filename     
        done
    - name: Get the release version
      id: strip-branch-name
      run: |
        release_version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/.*\///')
        echo "Building release version $release_version"
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV
      shell: bash

    - name: containerize
      env:
        PORT: ${{ secrets.PORT }}
        APP_NAME: ${{ vars.APP_NAME }}
        FLASK_ENV: ${{ vars.FLASK_ENV }}
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MONGODB_DB: ${{ secrets.MONGODB_DB }}
        SESSION_TYPE: ${{ vars.SESSION_TYPE }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        REDIS_QUEUE_NAME: ${{ secrets.REDIS_QUEUE_NAME }}
        REGISTRY: ${{ vars.REGISTRY }}

      run: |
        docker build --build-arg PORT="$PORT"  --build-arg  FLASK_APP="${APP_NAME}" --build-arg  FLASK_ENV="$FLASK_ENV" --build-arg  MONGODB_URL="$MONGODB_URL" --build-arg MONGODB_DB="$MONGODB_DB" --build-arg MONGODB_AUTH_MECHANISM=DEFAULT --build-arg SESSION_TYPE="$SESSION_TYPE"  --build-arg REDIS_URL="$REDIS_URL" --build-arg  REDIS_QUEUE_NAME="$REDIS_QUEUE_NAME"  -t  "$APP_NAME:$RELEASE_VERSION" .

    - name: Tag the image
      run: docker tag $APP_NAME:$RELEASE_VERSION $REGISTRY/$APP_NAME:$RELEASE_VERSION

    - name: Create a latest image
      run: docker tag $APP_NAME:$RELEASE_VERSION $REGISTRY/$APP_NAME:latest

    - name: Push the Docker image with version number
      run: docker push $REGISTRY/$APP_NAME:$RELEASE_VERSION
